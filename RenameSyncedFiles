#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :

use strict;

{
	my @atend;
	sub atend(&) { push @atend, @_ }
	END { &$_() for @atend }
}

my $dir1 = "/mnt/hdb1/rachel/Radio Shows";
my $dir2 = "/mnt/rudolf-d/Radio Shows";
-d $dir1 or die;
-d $dir2 or die;

my $state1 = scan($dir1);
my $state2 = scan($dir2);

# We're looking for files which are in both directories, which seem to match
# based on SHA1, size and possibly timestamp.

sub make_key { $_[0]{sha1} . "/" . $_[0]{size} }

my ($byhashsize1, $byhashsize2) = map {
	my $state = $_;
	my %h;

	push @{ $h{ make_key($_) } }, $_ for values %$state;

	\%h;
} ($state1, $state2);

# For each source file...
for my $src (values %$state1)
{
	# Are there any duplicates here?
	my @matches = @{ $byhashsize1->{ make_key($src) } };
	if (@matches > 1)
	{
		use Data::Dumper;
		print Data::Dumper->Dump([ \@matches ],[ '*matches' ]);
		die;
	}

	# OK, just one file here then.  What possible files might it match on the
	# other side?
	@matches = @{ $byhashsize2->{ make_key($src) } || [] };
	if (@matches > 1)
	{
		# This file matches multiple files on the other side.
		# Select one to keep, and discard the rest.

		(my $same) = grep { $_->{file} eq $src->{file} } @matches;
		(my @diff) = grep { $_->{file} ne $src->{file} } @matches;

		if ($same)
		{
			# Keep this.  Discard the rest.
			for (@diff)
			{
				my $path = "$dir2/$_->{file}";
				print "Discarding $path\n";

				if (unlink $path)
				{
					delete $state2->{ $_->{file} };
				} else {
					warn "unlink: $!\n";
				}
			}
		} else {
			# Multiple matches, none of which match.
			# Pick one to keep at random.
			die "picking one at random";
		}
	} elsif (@matches) {
		# One match exactly.
		my $match = $matches[0];
		if ($match->{file} eq $src->{file})
		{
			# Perfect - same name and everything.
		} else {
			# Need to move/rename.
			my $old = $match->{file};
			my $new = $src->{file};
			print "Need to rename $dir2/$old to $dir2/$new\n";

			if (rename "$dir2/$old", "$dir2/$new")
			{
				my $f = delete $state2->{$old};
				$f->{file} = $new;
				$state2->{$new} = $f;
			} else {
				warn "rename: $!\n";
			}
		}
	}
}



sub scan
{
	my $dir = shift;
	my $statefile = "$dir/.state";

	my %state;
	loadstate(\%state, $statefile)
		or $!{ENOENT}
		or die $!;

	scandir(\%state, $dir);

	my $state = \%state;
	atend { savestate($state, $statefile) };
	$state;
}

sub loadstate
{
	my ($state, $statefile) = @_;

	open(my $fh, "<", $statefile)
		or return 0;

	use URI::Escape qw( uri_escape uri_unescape );

	while (<$fh>)
	{
		chomp;
		my %h = map { uri_unescape($_) } map { split /=/, $_, 2 } split ' ';
		$h{notfound} = 1;
		$state->{$h{file}} = \%h;
	}

	1;
}

sub savestate
{
	my ($state, $statefile) = @_;

	open(my $fh, ">", $statefile.".new")
		or die $!;

	local $\ = "\n";
	local $, = " ";
	for my $row (values %$state)
	{
		print $fh map { uri_escape($_)."=".uri_escape($row->{$_}) } keys %$row;
	}

	close $fh or die $!;

	rename $statefile.".new" => $statefile
		or die $!;
	1;
}

sub wanted
{
	my ($state, $dir) = @_;

	my $name = $_;
	$name =~ s/^\Q$dir\E\/// or return;

	/\.(ogg|wav)$/i or return;
	-f or return;

	my $file = $_;
	my $getdigest = sub {
		print $_, "\n";
		use Digest::SHA1;
		my $ctx = Digest::SHA1->new;
		open(my $fh, "<", $file) or die;
		binmode $fh;
		$ctx->addfile($fh);
		$ctx->hexdigest;
	};

	if (my $exist = $state->{$name})
	{
		delete $exist->{notfound};

		if (-s(_) == $exist->{size}
			and (stat _)[9] == $exist->{mtime})
		{
			# assume digest is OK
		} else {
			warn "mismatch for $_ - rereading\n";
			$exist->{size} = -s _;
			$exist->{mtime} = (stat _)[9];
			$exist->{sha1} = &$getdigest();
		}
	} else {
		my %h = (
			file	=> $name,
			size	=> -s _,
			mtime	=> (stat _)[9],
			sha1	=> &$getdigest(),
		);
		$state->{$name} = \%h;
	}
};

sub scandir
{
	my ($state, $dir) = @_;

	use File::Find;
	find({ wanted => sub { wanted($state, $dir) }, no_chdir => 1 }, $dir);

	delete $state->{ $_->{file} }
		for grep { $_->{notfound} } values %$state;
}

# eof RenameSyncedFiles
